%{ if ingress != null ~}
ingress:
  enabled: true
  className: ${ingress.class_name}
  rules:
    - host: ${ingress.host}
      paths:
        - path: /
          pathType: Prefix
  tls:
    - hosts:
        - ${ingress.host}
      secretName: ${ingress.tls.secret_name}

certManager:
  certificate:
    create: ${ingress.tls.create_certificate}
  issuer:
    create: ${ingress.tls.create_issuer}
    email: ${ingress.tls.issuer_email}
%{ endif ~}

%{ if length(admin_emails) > 0 ~}
auth:
  adminEmails:
%{ for admin_email in admin_emails ~}
    - "${admin_email}"
%{ endfor ~}
%{ endif ~}

%{ if chart_discovery != [] ~}
chartDiscovery:
  instances:
%{ for instance in chart_discovery ~}
    - name: ${instance.instance_name}
      enableTagParser: ${instance.enable_tag_parser}
      ecrEvents:
        queueName: ${instance.queue_name}
        regionName: ${instance.queue_region}
      serviceAccount:
        annotations:
          eks.amazonaws.com/role-arn: ${instance.iam_role_arn}
%{ endfor ~}
%{ endif ~}

%{ if k8s_agents != [] ~}
k8sAgent:
  instances:
%{ for k8s_agent in k8s_agents ~}
    - name: ${k8s_agent.instance_name}
      serviceAccount:
        annotations:
          eks.amazonaws.com/role-arn: ${k8s_agent.iam_role_arn}
%{ endfor ~}
%{ endif ~}

%{ if node_selector != null ~}
nodeSelector:
  ${node_selector.key}: "${node_selector.value}"
%{ endif ~}

%{ if backup != null ~}
backupJob:
  enabled: true
  config:
    bucketName: ${backup.bucket_name}
    bucketRegion: ${backup.bucket_region}
    bucketPrefix: ${backup.bucket_prefix}
  serviceAccount:
    annotations:
      eks.amazonaws.com/role-arn: ${backup.iam_role_arn}
%{ endif ~}
